#pragma once
/**
 * \file
 * \brief C API for VTracer.
 *
 * \warning This file is auto-generated by cbindgen.
 */


#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <time.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef enum VTracerColorMode {
  V_TRACER_COLOR_MODE_COLOR,
  V_TRACER_COLOR_MODE_BINARY,
} VTracerColorMode;

typedef enum VTracerHierarchical {
  V_TRACER_HIERARCHICAL_STACKED,
  V_TRACER_HIERARCHICAL_CUTOUT,
} VTracerHierarchical;

typedef enum VTracerPathSimplifyMode {
  V_TRACER_PATH_SIMPLIFY_MODE_NONE = 0,
  V_TRACER_PATH_SIMPLIFY_MODE_POLYGON = 1,
  V_TRACER_PATH_SIMPLIFY_MODE_SPLINE = 2,
} VTracerPathSimplifyMode;

/**
 * VTracer Config
 */
typedef struct VTracerConfig {
  /**
   * Color mode `color` (default) or Binary image `bw`
   */
  enum VTracerColorMode color_mode;
  /**
   * Hierarchical clustering `stacked` (default) or non-stacked `cutout`.
   * Only applies to color mode.
   */
  enum VTracerHierarchical hierarchical;
  /**
   * Discard patches smaller than X px in size (must be between 0 and 16, default 1)
   */
  size_t filter_speckle;
  /**
   * Number of significant bits to use in an RGB channel (must be between 1 and 8, default 6)
   */
  int32_t color_precision;
  /**
   * Color difference between gradient layers (must be between 0 and 255, default 16)
   */
  int32_t layer_difference;
  /**
   * Curver fitting mode `pixel`, `polygon`, `spline` (default `spline`)
   */
  enum VTracerPathSimplifyMode mode;
  /**
   * Minimum momentary angle (degree) to be considered a corner (must be between 0 and 180, default 60)
   */
  int32_t corner_threshold;
  /**
   * Perform iterative subdivide smooth until all segments are shorter than this length (must be between 3.5 and 10, default 4)
   */
  double length_threshold;
  /**
   * Maximum iterations before stopping (must be between 1 and 100, default 10)
   */
  size_t max_iterations;
  /**
   * Minimum angle displacement (degree) to splice a spline (must be between 0 and 180, default 45)
   */
  int32_t splice_threshold;
  /**
   * Number of decimal places to use in path string (minimum 0, default 2)
   */
  uint32_t path_precision;
  /**
   * Fraction of pixels in the top/bottom rows of the image that need to be transparent before
   * the entire image will be keyed. (between 0 and 1, default 0.2)
   */
  float keying_threshold;
} VTracerConfig;

typedef struct VTracerColorImage {
  /**
   * Pointer to RGBA pixels; data must be width * height * 4 bytes
   */
  uint8_t *pixels;
  /**
   * Width of the image in pixels
   */
  size_t width;
  /**
   * Height of the image in pixels
   */
  size_t height;
} VTracerColorImage;

/**
 * Set the default configuration.
 *
 * # Arguments
 *
 * * `c_config` - The configuration to set.
 */
void vtracer_set_default_config(struct VTracerConfig *c_config);

/**
 * Convert an image file to SVG.
 *
 * ## Arguments
 *
 * * `input_path` - The path to the input image.
 * * `output_path` - The path to the output SVG file.
 * * `config` - The configuration for the conversion.
 *
 * ## Returns
 *
 * * `nullptr` - If the conversion is successful.
 * * `<error_message>` - If the conversion fails. If the error message is not null, you must free it using `vtracer_free_string`.
 */
const char *vtracer_convert_image_to_svg(const char *input_path, const char *output_path, const struct VTracerConfig *config);

/**
 * Convert an image from memory to SVG.
 *
 * ## Arguments
 *
 * * `svg_data` - The image data.
 * * `output_path` - The path to the output SVG file.
 * * `config` - The configuration for the conversion.
 *
 * ## Returns
 *
 * * `nullptr` - If the conversion is successful.
 * * `<error_message>` - If the conversion fails. If the error message is not null, you must free it using `vtracer_free_string`.
 */
const char *vtracer_convert_image_memory_to_svg(const struct VTracerColorImage *svg_data,
                                                const char *output_path,
                                                const struct VTracerConfig *config);

/**
 * Free a string.
 *
 * If the above functions returns an error message, you must call this function to free the memory; do NOT attempt to free from C code.
 *
 * ## Arguments
 *
 * * `s` - The string to free.
 */
void vtracer_free_string(const char *s);

#ifdef __cplusplus
}
#endif
